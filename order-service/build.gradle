plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.google.cloud.tools.jib' version '3.4.3'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(20)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.3")
	set('testKeycloakVersion', "2.3.0")
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

	runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.101.Final:osx-aarch_64'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.postgresql:r2dbc-postgresql'
	runtimeOnly 'org.springframework:spring-jdbc'
	runtimeOnly 'io.github.resilience4j:resilience4j-micrometer'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent"

	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.testcontainers:r2dbc'
	testImplementation 'com.squareup.okhttp3:mockwebserver'
	testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-stream-test-binder'
	testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}"


	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jib {
	from {
		image = 'eclipse-temurin:20'
		platforms {
			platform {
				os = "linux"
				architecture = "arm64"
			}
			platform {
				os = "linux"
				architecture = "amd64"
			}
		}
	}
	to {
		image = "ghcr.io/${System.getenv('GITHUB_REPOSITORY')?.toLowerCase() ?: 'default_repo'}/order-service:latest"
		auth {
			username = "${System.getenv('GITHUB_ACTOR')?.toLowerCase() ?: 'default_actor'}"
			password = "${System.getenv('GITHUB_TOKEN') ?: 'default_token'}"
		}
	}
	container {
		environment = [
				'SPRING_CLOUD_CONFIG_URI': System.getenv('SPRING_CLOUD_CONFIG_URI') ?: 'http://localhost:8888',
				'SPRING_R2DBC_URL': System.getenv('SPRING_DATASOURCE_URL') ?: 'r2dbc:postgresql://localhost:5433/polardb_order',
				'SPRING_FLYWAY_URL': System.getenv('SPRING_FLYWAY_URL') ?: 'jdbc:postgresql://localhost:5433/polardb_order',
				'SPRING_RABBITMQ_HOST': System.getenv('SPRING_RABBITMQ_HOST') ?: 'localhost',
				'SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI': System.getenv('SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI') ?: 'http://localhost:8080/realms/PolarBookshop',

				'POLAR_CATALOG_SERVICE_URI': System.getenv('POLAR_CATALOG_SERVICE_URI') ?: 'http://localhost:9001'
		]
	}
}

