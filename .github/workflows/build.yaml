name: Java CI with Gradle

on:
  workflow_dispatch:
    inputs:
      architecture:

jobs:
  build:
    env:
      APP_NAME: cloud-native-spring

    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    # Set up JDK 20
    - name: Set up JDK 20
      uses: actions/setup-java@v4.2.2
      with:
        distribution: 'temurin'
        java-version: '20'

    # Cache the Gradle dependencies
    - name: Cache Gradle packages
      uses: actions/cache@v4.0.2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle

    # Grant execute permission for Gradle wrapper
    - name: Grant execute permission for Gradle wrapper
      run: chmod +x gradlew

    # Build the project
    - name: Build with Gradle
      run: ./gradlew build

    # Run tests
    - name: Run tests
      run: ./gradlew test

    # Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # # Build Docker image using Spring Boot's bootBuildImage
    # - name: Build Docker Image
    #   run: ./gradlew bootBuildImage --imageName=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest

    # # Push Docker image to DockerHub
    # - name: Push Docker Image
    #   run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest

    # Build and push Docker image using Jib
    - name: Build and push Docker image
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      run: ./gradlew jib
