name: Order Service CI with Gradle & Jib

on:
  workflow_dispatch:

jobs:
  build:
    env:
      APP_NAME: cloud-native-spring
      SPRING_CLOUD_CONFIG_URI: http://config-service:8888
      SPRING_RABBITMQ_HOST: polar-rabbitmq
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI: http://polar-keycloak/realms/PolarBookshop

    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4.1.7

      # Set up JDK 20
      - name: Set up JDK 20
        uses: actions/setup-java@v4.2.2
        with:
          distribution: 'temurin'
          java-version: '20'

      # Cache the Gradle dependencies
      - name: Cache Gradle packages
        uses: actions/cache@v4.0.2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('order-service/**/*.gradle*', 'order-service/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      # Grant execute permission for Gradle wrapper
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x order-service/gradlew

      # Run tests
      - name: Run tests
        run: cd order-service && ./gradlew test

      # Build and push Docker image using Jib
      - name: Build and push Docker image
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GHCR_PAT }}
          SPRING_DATASOURCE_URL: r2dbc:postgresql://polar-db:5432/polardb_order
          SPRING_FLYWAY_URL: jdbc:postgresql://polar-db:5432/polardb_order
          POLAR_CATALOG_SERVICE_URI: http://catalog-service:80
        run: cd order-service && ./gradlew jib